// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace EFProvider
{
    using Application.DTO;

    // Matches
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class MatchConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Match>
    {
        public MatchConfiguration()
            : this("dbo")
        {
        }

        public MatchConfiguration(string schema)
        {
            ToTable("Matches", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Date).HasColumnName(@"Date").IsRequired().HasColumnType("datetime");
            Property(x => x.Field).HasColumnName(@"Field").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.City).HasColumnName(@"City").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.State).HasColumnName(@"State").IsRequired().IsFixedLength().HasColumnType("nchar").HasMaxLength(10);
            Property(x => x.TeamA).HasColumnName(@"TeamA").IsRequired().HasColumnType("int");
            Property(x => x.TeamB).HasColumnName(@"TeamB").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Team_TeamA).WithMany(b => b.TeamA).HasForeignKey(c => c.TeamA).WillCascadeOnDelete(false); // FK_Matches_TeamsA
            HasRequired(a => a.Team_TeamB).WithMany(b => b.TeamB).HasForeignKey(c => c.TeamB).WillCascadeOnDelete(false); // FK_Matches_TeamsB
        }
    }

}
// </auto-generated>
